
HotPotato.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000035c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  000003d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00802000  00802000  000003d0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003d0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000400  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005ab8  00000000  00000000  00000558  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000040e9  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a9a  00000000  00000000  0000a0f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b0  00000000  00000000  0000ab94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000031d1  00000000  00000000  0000ad44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000010c  00000000  00000000  0000df15  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  0000e021  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
   8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
   c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  10:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  14:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  18:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  1c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  20:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  24:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  28:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  2c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  30:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  34:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  38:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  3c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  40:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  44:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  48:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  4c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  50:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  54:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  58:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  5c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  60:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  64:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  68:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  6c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  70:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  74:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  78:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  7c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  80:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  84:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  88:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  8c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  90:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  94:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  98:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  9c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  a0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  a4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  a8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  ac:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  b0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  b4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  b8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  bc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  c0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  c4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  c8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  cc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  d0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  d4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  d8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  dc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  e0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  e4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  e8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  ec:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  f0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  f4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  f8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  fc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 100:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 104:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 108:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 10c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 110:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 114:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 118:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 11c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 120:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 124:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 128:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 12c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 130:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 134:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 138:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 13c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 140:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 144:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 148:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 14c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 150:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 154:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 158:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 15c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 160:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 164:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 168:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 16c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 170:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 174:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 178:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 17c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 180:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 184:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 188:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 18c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 190:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 194:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 198:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 19c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1a0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1a4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1a8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1ac:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1b0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1b4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1b8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1bc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1c0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1c4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1c8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1cc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1d0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1d4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1d8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1dc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1e0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1e4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1e8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1ec:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1f0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1f4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1f8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_clear_bss>:
 214:	20 e2       	ldi	r18, 0x20	; 32
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	01 c0       	rjmp	.+2      	; 0x21e <.do_clear_bss_start>

0000021c <.do_clear_bss_loop>:
 21c:	1d 92       	st	X+, r1

0000021e <.do_clear_bss_start>:
 21e:	a3 30       	cpi	r26, 0x03	; 3
 220:	b2 07       	cpc	r27, r18
 222:	e1 f7       	brne	.-8      	; 0x21c <.do_clear_bss_loop>
 224:	0e 94 65 01 	call	0x2ca	; 0x2ca <main>
 228:	0c 94 ac 01 	jmp	0x358	; 0x358 <_exit>

0000022c <__bad_interrupt>:
 22c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000230 <Game_InitGame>:
}

GameState_e Game_GetGameState(void)
{
	return ROUND_LOSS;
}
 230:	0e 94 7d 01 	call	0x2fa	; 0x2fa <Rand_Init>
 234:	e0 e0       	ldi	r30, 0x00	; 0
 236:	f0 e2       	ldi	r31, 0x20	; 32
 238:	10 82       	st	Z, r1
 23a:	11 82       	std	Z+1, r1	; 0x01
 23c:	12 82       	std	Z+2, r1	; 0x02
 23e:	08 95       	ret

00000240 <Game_PlayRound>:
 240:	cf 93       	push	r28
 242:	df 93       	push	r29
 244:	d0 91 08 06 	lds	r29, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
 248:	0e 94 97 01 	call	0x32e	; 0x32e <Rand_GetRandomPowerOfTwoU8>
 24c:	c8 2f       	mov	r28, r24
 24e:	0e 94 64 01 	call	0x2c8	; 0x2c8 <GPIO_WriteValueToLeds>
 252:	8c 2f       	mov	r24, r28
 254:	80 95       	com	r24
 256:	80 93 44 06 	sts	0x0644, r24	; 0x800644 <__TEXT_REGION_LENGTH__+0x700644>
 25a:	0e 94 a5 01 	call	0x34a	; 0x34a <TC_Start>
 25e:	e0 e0       	ldi	r30, 0x00	; 0
 260:	f8 e0       	ldi	r31, 0x08	; 8
 262:	a0 e0       	ldi	r26, 0x00	; 0
 264:	b6 e0       	ldi	r27, 0x06	; 6
 266:	0b c0       	rjmp	.+22     	; 0x27e <Game_PlayRound+0x3e>
 268:	18 96       	adiw	r26, 0x08	; 8
 26a:	8c 91       	ld	r24, X
 26c:	18 97       	sbiw	r26, 0x08	; 8
 26e:	8d 27       	eor	r24, r29
 270:	c8 13       	cpse	r28, r24
 272:	05 c0       	rjmp	.+10     	; 0x27e <Game_PlayRound+0x3e>
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	0e 94 64 01 	call	0x2c8	; 0x2c8 <GPIO_WriteValueToLeds>
 27a:	91 e0       	ldi	r25, 0x01	; 1
 27c:	04 c0       	rjmp	.+8      	; 0x286 <Game_PlayRound+0x46>
 27e:	84 85       	ldd	r24, Z+12	; 0x0c
 280:	80 ff       	sbrs	r24, 0
 282:	f2 cf       	rjmp	.-28     	; 0x268 <Game_PlayRound+0x28>
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	91 30       	cpi	r25, 0x01	; 1
 28a:	09 f0       	breq	.+2      	; 0x28e <Game_PlayRound+0x4e>
 28c:	80 e0       	ldi	r24, 0x00	; 0
 28e:	df 91       	pop	r29
 290:	cf 91       	pop	r28
 292:	08 95       	ret

00000294 <Game_IncrementCurrentScore>:
 294:	e0 e0       	ldi	r30, 0x00	; 0
 296:	f0 e2       	ldi	r31, 0x20	; 32
 298:	81 81       	ldd	r24, Z+1	; 0x01
 29a:	8f 5f       	subi	r24, 0xFF	; 255
 29c:	81 83       	std	Z+1, r24	; 0x01
 29e:	08 95       	ret

000002a0 <Game_HandleLoss>:

void Game_HandleLoss(void)
{
	// TODO: Play loss animation
	if (game.scoreInfo.currScore > game.scoreInfo.highScore)
 2a0:	e0 e0       	ldi	r30, 0x00	; 0
 2a2:	f0 e2       	ldi	r31, 0x20	; 32
 2a4:	81 81       	ldd	r24, Z+1	; 0x01
 2a6:	92 81       	ldd	r25, Z+2	; 0x02
 2a8:	98 17       	cp	r25, r24
 2aa:	18 f4       	brcc	.+6      	; 0x2b2 <Game_HandleLoss+0x12>
	{
		game.scoreInfo.highScore = game.scoreInfo.currScore;
 2ac:	82 83       	std	Z+2, r24	; 0x02
		game.scoreInfo.currScore = 0;
 2ae:	11 82       	std	Z+1, r1	; 0x01
 2b0:	08 95       	ret
		//TODO: Blink High Score
	}
	else
	{
		//TODO: Display Score
		game.scoreInfo.currScore = 0;
 2b2:	10 92 01 20 	sts	0x2001, r1	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
 2b6:	08 95       	ret

000002b8 <GPIO_Init>:

void GPIO_Init(void)
{
	// initialize the inline SPST as input
	// PA0-7 as input
	PORTA.DIRCLR = ALL_BITS_8;
 2b8:	8f ef       	ldi	r24, 0xFF	; 255
 2ba:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x700602>
	
	// initialize LEDs as output
	// PC0-7 as output
	PORTC.DIRSET = ALL_BITS_8;
 2be:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
 2c2:	08 95       	ret

000002c4 <GPIO_GetMostRecentUserInput>:
}

UserInput_e GPIO_GetMostRecentUserInput(void)
{
	return USER_QUIT;
}
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	08 95       	ret

000002c8 <GPIO_WriteValueToLeds>:

void GPIO_WriteValueToLeds(uint8_t value)
{
 2c8:	08 95       	ret

000002ca <main>:

#define DEFAULT_HIGH_SCORE		(10)

int main(void)
{
	GPIO_Init();
 2ca:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <GPIO_Init>
	TC_Init();
 2ce:	0e 94 9e 01 	call	0x33c	; 0x33c <TC_Init>
	Game_InitGame();
 2d2:	0e 94 18 01 	call	0x230	; 0x230 <Game_InitGame>
	
    /* Replace with your application code */
	GameState_e roundResult;
    while (GPIO_GetMostRecentUserInput() != USER_QUIT)
 2d6:	0c c0       	rjmp	.+24     	; 0x2f0 <main+0x26>
	{
		roundResult = Game_PlayRound();
 2d8:	0e 94 20 01 	call	0x240	; 0x240 <Game_PlayRound>
		switch(roundResult)
 2dc:	88 23       	and	r24, r24
 2de:	19 f0       	breq	.+6      	; 0x2e6 <main+0x1c>
 2e0:	81 30       	cpi	r24, 0x01	; 1
 2e2:	21 f0       	breq	.+8      	; 0x2ec <main+0x22>
 2e4:	05 c0       	rjmp	.+10     	; 0x2f0 <main+0x26>
		{
			case ROUND_LOSS:
			{
				Game_HandleLoss();
 2e6:	0e 94 50 01 	call	0x2a0	; 0x2a0 <Game_HandleLoss>
				break;
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <main+0x26>
			}
			case ROUND_WIN:
			{
				Game_IncrementCurrentScore();
 2ec:	0e 94 4a 01 	call	0x294	; 0x294 <Game_IncrementCurrentScore>
	TC_Init();
	Game_InitGame();
	
    /* Replace with your application code */
	GameState_e roundResult;
    while (GPIO_GetMostRecentUserInput() != USER_QUIT)
 2f0:	0e 94 62 01 	call	0x2c4	; 0x2c4 <GPIO_GetMostRecentUserInput>
 2f4:	81 30       	cpi	r24, 0x01	; 1
 2f6:	81 f7       	brne	.-32     	; 0x2d8 <main+0xe>
 2f8:	ff cf       	rjmp	.-2      	; 0x2f8 <main+0x2e>

000002fa <Rand_Init>:
}

uint8_t	Rand_GetRandomU8(void)
{
	return (uint8_t) TCC0.CNT;
}
 2fa:	08 95       	ret

000002fc <Rand_RoundUpToNearestPowerOfTwoU8>:
	return Rand_RoundUpToNearestPowerOfTwoU8(Rand_GetRandomU8());
}

uint8_t Rand_RoundUpToNearestPowerOfTwoU8(uint8_t valuetoRound)
{
	valuetoRound--;
 2fc:	81 50       	subi	r24, 0x01	; 1
	valuetoRound |= valuetoRound >> 1;
 2fe:	98 2f       	mov	r25, r24
 300:	96 95       	lsr	r25
 302:	28 2f       	mov	r18, r24
 304:	29 2b       	or	r18, r25
	valuetoRound |= valuetoRound >> 2;
 306:	92 2f       	mov	r25, r18
 308:	96 95       	lsr	r25
 30a:	96 95       	lsr	r25
 30c:	29 2b       	or	r18, r25
	valuetoRound |= valuetoRound >> 4;
 30e:	92 2f       	mov	r25, r18
 310:	92 95       	swap	r25
 312:	9f 70       	andi	r25, 0x0F	; 15
 314:	82 2f       	mov	r24, r18
 316:	89 2b       	or	r24, r25
	valuetoRound |= valuetoRound >> 8;
	valuetoRound |= valuetoRound >> 16;
	valuetoRound |= valuetoRound >> 32;
	valuetoRound |= valuetoRound >> 64;
 318:	28 2f       	mov	r18, r24
 31a:	30 e0       	ldi	r19, 0x00	; 0
 31c:	33 0f       	add	r19, r19
 31e:	22 0b       	sbc	r18, r18
 320:	32 2f       	mov	r19, r18
 322:	28 2b       	or	r18, r24
	valuetoRound |= valuetoRound >> 128;
 324:	82 2f       	mov	r24, r18
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	82 2b       	or	r24, r18
	valuetoRound++;
	return valuetoRound;
 32a:	8f 5f       	subi	r24, 0xFF	; 255
 32c:	08 95       	ret

0000032e <Rand_GetRandomPowerOfTwoU8>:
	
}

uint8_t	Rand_GetRandomU8(void)
{
	return (uint8_t) TCC0.CNT;
 32e:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
 332:	90 91 21 08 	lds	r25, 0x0821	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
}

uint8_t Rand_GetRandomPowerOfTwoU8(void)
{
	return Rand_RoundUpToNearestPowerOfTwoU8(Rand_GetRandomU8());
 336:	0e 94 7e 01 	call	0x2fc	; 0x2fc <Rand_RoundUpToNearestPowerOfTwoU8>
}
 33a:	08 95       	ret

0000033c <TC_Init>:
#include <avr/io.h>
#include "timer.h"

void TC_Init(void)
{
	TCC0.PER = TCC0_PERIOD;
 33c:	8f ef       	ldi	r24, 0xFF	; 255
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
 344:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
 348:	08 95       	ret

0000034a <TC_Start>:
}

void TC_Start(void)
{
	TCC0.CNT = 0;
 34a:	e0 e0       	ldi	r30, 0x00	; 0
 34c:	f8 e0       	ldi	r31, 0x08	; 8
 34e:	10 a2       	std	Z+32, r1	; 0x20
 350:	11 a2       	std	Z+33, r1	; 0x21
	TCC0.CTRLA = TCC0_PRESCALER_gc;
 352:	87 e0       	ldi	r24, 0x07	; 7
 354:	80 83       	st	Z, r24
 356:	08 95       	ret

00000358 <_exit>:
 358:	f8 94       	cli

0000035a <__stop_program>:
 35a:	ff cf       	rjmp	.-2      	; 0x35a <__stop_program>
