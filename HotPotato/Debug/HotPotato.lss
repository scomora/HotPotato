
HotPotato.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002fc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  00000370  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00802000  00802000  00000370  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  000003e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005475  00000000  00000000  000004f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004029  00000000  00000000  00005965  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009cf  00000000  00000000  0000998e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  0000a360  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000031d5  00000000  00000000  0000a500  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000b3  00000000  00000000  0000d6d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  0000d788  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
   8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
   c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  10:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  14:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  18:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  1c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  20:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  24:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  28:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  2c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  30:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  34:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  38:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  3c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  40:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  44:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  48:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  4c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  50:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  54:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  58:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  5c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  60:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  64:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  68:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  6c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  70:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  74:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  78:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  7c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  80:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  84:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  88:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  8c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  90:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  94:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  98:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  9c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  a0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  a4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  a8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  ac:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  b0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  b4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  b8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  bc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  c0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  c4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  c8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  cc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  d0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  d4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  d8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  dc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  e0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  e4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  e8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  ec:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  f0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  f4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  f8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  fc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 100:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 104:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 108:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 10c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 110:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 114:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 118:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 11c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 120:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 124:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 128:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 12c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 130:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 134:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 138:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 13c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 140:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 144:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 148:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 14c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 150:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 154:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 158:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 15c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 160:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 164:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 168:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 16c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 170:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 174:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 178:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 17c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 180:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 184:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 188:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 18c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 190:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 194:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 198:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 19c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1a0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1a4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1a8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1ac:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1b0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1b4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1b8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1bc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1c0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1c4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1c8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1cc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1d0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1d4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1d8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1dc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1e0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1e4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1e8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1ec:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1f0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1f4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1f8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_clear_bss>:
 214:	20 e2       	ldi	r18, 0x20	; 32
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	01 c0       	rjmp	.+2      	; 0x21e <.do_clear_bss_start>

0000021c <.do_clear_bss_loop>:
 21c:	1d 92       	st	X+, r1

0000021e <.do_clear_bss_start>:
 21e:	a3 30       	cpi	r26, 0x03	; 3
 220:	b2 07       	cpc	r27, r18
 222:	e1 f7       	brne	.-8      	; 0x21c <.do_clear_bss_loop>
 224:	0e 94 57 01 	call	0x2ae	; 0x2ae <main>
 228:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <_exit>

0000022c <__bad_interrupt>:
 22c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000230 <Game_InitGame>:
 
Game_t game;

void Game_InitGame(void)
{
	Rand_Init();
 230:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <Rand_Init>
	game.gameState = ROUND_LOSS;
 234:	e0 e0       	ldi	r30, 0x00	; 0
 236:	f0 e2       	ldi	r31, 0x20	; 32
 238:	10 82       	st	Z, r1
	game.scoreInfo.all = 0;
 23a:	11 82       	std	Z+1, r1	; 0x01
 23c:	12 82       	std	Z+2, r1	; 0x02
 23e:	08 95       	ret

00000240 <Game_PlayRound>:
}

GameState_e	Game_PlayRound(void)
{
 240:	cf 93       	push	r28
 242:	df 93       	push	r29
	uint8_t prevUserInput = PORTA.IN;
 244:	d0 91 08 06 	lds	r29, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
	Bool_e userGuessedCorrectly = FALSE;
	uint8_t valueToSwitchOn = Rand_GetRandomPowerOfTwoU8();
 248:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <Rand_GetRandomPowerOfTwoU8>
 24c:	c8 2f       	mov	r28, r24
	GPIO_WriteValueToLeds(valueToSwitchOn);
 24e:	0e 94 56 01 	call	0x2ac	; 0x2ac <GPIO_WriteValueToLeds>
	PORTC.OUT = ~valueToSwitchOn;
 252:	8c 2f       	mov	r24, r28
 254:	80 95       	com	r24
 256:	80 93 44 06 	sts	0x0644, r24	; 0x800644 <__TEXT_REGION_LENGTH__+0x700644>
	TC_Start();
 25a:	0e 94 75 01 	call	0x2ea	; 0x2ea <TC_Start>
}

GameState_e	Game_PlayRound(void)
{
	uint8_t prevUserInput = PORTA.IN;
	Bool_e userGuessedCorrectly = FALSE;
 25e:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t valueToSwitchOn = Rand_GetRandomPowerOfTwoU8();
	GPIO_WriteValueToLeds(valueToSwitchOn);
	PORTC.OUT = ~valueToSwitchOn;
	TC_Start();
	while ((TCC0.INTFLAGS & TC0_OVFIF_bm) != TC0_OVFIF_bm)
 260:	e0 e0       	ldi	r30, 0x00	; 0
 262:	f8 e0       	ldi	r31, 0x08	; 8
	{
		if ((PORTA.IN ^ prevUserInput) == valueToSwitchOn)
 264:	a0 e0       	ldi	r26, 0x00	; 0
 266:	b6 e0       	ldi	r27, 0x06	; 6
		{
			userGuessedCorrectly = TRUE;
 268:	21 e0       	ldi	r18, 0x01	; 1
	Bool_e userGuessedCorrectly = FALSE;
	uint8_t valueToSwitchOn = Rand_GetRandomPowerOfTwoU8();
	GPIO_WriteValueToLeds(valueToSwitchOn);
	PORTC.OUT = ~valueToSwitchOn;
	TC_Start();
	while ((TCC0.INTFLAGS & TC0_OVFIF_bm) != TC0_OVFIF_bm)
 26a:	07 c0       	rjmp	.+14     	; 0x27a <Game_PlayRound+0x3a>
	{
		if ((PORTA.IN ^ prevUserInput) == valueToSwitchOn)
 26c:	18 96       	adiw	r26, 0x08	; 8
 26e:	8c 91       	ld	r24, X
 270:	18 97       	sbiw	r26, 0x08	; 8
 272:	8d 27       	eor	r24, r29
 274:	c8 13       	cpse	r28, r24
 276:	01 c0       	rjmp	.+2      	; 0x27a <Game_PlayRound+0x3a>
		{
			userGuessedCorrectly = TRUE;
 278:	92 2f       	mov	r25, r18
	Bool_e userGuessedCorrectly = FALSE;
	uint8_t valueToSwitchOn = Rand_GetRandomPowerOfTwoU8();
	GPIO_WriteValueToLeds(valueToSwitchOn);
	PORTC.OUT = ~valueToSwitchOn;
	TC_Start();
	while ((TCC0.INTFLAGS & TC0_OVFIF_bm) != TC0_OVFIF_bm)
 27a:	84 85       	ldd	r24, Z+12	; 0x0c
 27c:	80 ff       	sbrs	r24, 0
 27e:	f6 cf       	rjmp	.-20     	; 0x26c <Game_PlayRound+0x2c>
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	91 30       	cpi	r25, 0x01	; 1
 284:	09 f0       	breq	.+2      	; 0x288 <Game_PlayRound+0x48>
 286:	80 e0       	ldi	r24, 0x00	; 0
	if (userGuessedCorrectly == TRUE)
	{
		return ROUND_WIN;
	}
	return ROUND_LOSS;
}
 288:	df 91       	pop	r29
 28a:	cf 91       	pop	r28
 28c:	08 95       	ret

0000028e <Game_IncrementCurrentScore>:

void Game_IncrementCurrentScore(void)
{
	game.scoreInfo.currScore++;
 28e:	e0 e0       	ldi	r30, 0x00	; 0
 290:	f0 e2       	ldi	r31, 0x20	; 32
 292:	81 81       	ldd	r24, Z+1	; 0x01
 294:	8f 5f       	subi	r24, 0xFF	; 255
 296:	81 83       	std	Z+1, r24	; 0x01
 298:	08 95       	ret

0000029a <Game_FlashCurrentScoreOnLeds>:
}

void Game_FlashCurrentScoreOnLeds(void)
{
 29a:	08 95       	ret

0000029c <GPIO_Init>:

void GPIO_Init(void)
{
	// initialize the inline SPST as input
	// PA0-7 as input
	PORTA.DIRCLR = ALL_BITS_8;
 29c:	8f ef       	ldi	r24, 0xFF	; 255
 29e:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x700602>
	
	// initialize LEDs as output
	// PC0-7 as output
	PORTC.DIRSET = ALL_BITS_8;
 2a2:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
 2a6:	08 95       	ret

000002a8 <GPIO_GetMostRecentUserInput>:
}

UserInput_e GPIO_GetMostRecentUserInput(void)
{
	return USER_QUIT;
}
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	08 95       	ret

000002ac <GPIO_WriteValueToLeds>:

void GPIO_WriteValueToLeds(uint8_t value)
{
 2ac:	08 95       	ret

000002ae <main>:

#define DEFAULT_HIGH_SCORE		(10)

int main(void)
{
	GPIO_Init();
 2ae:	0e 94 4e 01 	call	0x29c	; 0x29c <GPIO_Init>
	TC_Init();
 2b2:	0e 94 6e 01 	call	0x2dc	; 0x2dc <TC_Init>
	Game_InitGame();
 2b6:	0e 94 18 01 	call	0x230	; 0x230 <Game_InitGame>
	
    /* Replace with your application code */
	GameState_e roundResult;
    while (GPIO_GetMostRecentUserInput() != USER_QUIT)
 2ba:	08 c0       	rjmp	.+16     	; 0x2cc <main+0x1e>
	{
		roundResult = Game_PlayRound();
 2bc:	0e 94 20 01 	call	0x240	; 0x240 <Game_PlayRound>
		switch(roundResult)
 2c0:	81 30       	cpi	r24, 0x01	; 1
 2c2:	21 f4       	brne	.+8      	; 0x2cc <main+0x1e>
			{
				break;
			}
			case ROUND_WIN:
			{
				Game_IncrementCurrentScore();
 2c4:	0e 94 47 01 	call	0x28e	; 0x28e <Game_IncrementCurrentScore>
				Game_FlashCurrentScoreOnLeds();
 2c8:	0e 94 4d 01 	call	0x29a	; 0x29a <Game_FlashCurrentScoreOnLeds>
	TC_Init();
	Game_InitGame();
	
    /* Replace with your application code */
	GameState_e roundResult;
    while (GPIO_GetMostRecentUserInput() != USER_QUIT)
 2cc:	0e 94 54 01 	call	0x2a8	; 0x2a8 <GPIO_GetMostRecentUserInput>
 2d0:	81 30       	cpi	r24, 0x01	; 1
 2d2:	a1 f7       	brne	.-24     	; 0x2bc <main+0xe>
 2d4:	ff cf       	rjmp	.-2      	; 0x2d4 <main+0x26>

000002d6 <Rand_Init>:
}

uint8_t	Rand_GetRandomU8(void)
{
	return 0;
}
 2d6:	08 95       	ret

000002d8 <Rand_GetRandomPowerOfTwoU8>:

uint8_t Rand_GetRandomPowerOfTwoU8(void)
{
	return 0;
}
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	08 95       	ret

000002dc <TC_Init>:
#include <avr/io.h>
#include "timer.h"

void TC_Init(void)
{
	TCC0.PER = TCC0_PERIOD;
 2dc:	8f ef       	ldi	r24, 0xFF	; 255
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
 2e4:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
 2e8:	08 95       	ret

000002ea <TC_Start>:
}

void TC_Start(void)
{
	TCC0.CNT = 0;
 2ea:	e0 e0       	ldi	r30, 0x00	; 0
 2ec:	f8 e0       	ldi	r31, 0x08	; 8
 2ee:	10 a2       	std	Z+32, r1	; 0x20
 2f0:	11 a2       	std	Z+33, r1	; 0x21
	TCC0.CTRLA = TCC0_PRESCALER_gc;
 2f2:	87 e0       	ldi	r24, 0x07	; 7
 2f4:	80 83       	st	Z, r24
 2f6:	08 95       	ret

000002f8 <_exit>:
 2f8:	f8 94       	cli

000002fa <__stop_program>:
 2fa:	ff cf       	rjmp	.-2      	; 0x2fa <__stop_program>
